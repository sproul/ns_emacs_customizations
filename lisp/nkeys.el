(provide 'nkeys)
(require 'nkeys-database)
(setq nkeys-line-noise-last-time nil)
(setq nkeys-fast-keys-expected nil)

(defun nkeys-roughly-subtract-time-in-microseconds(t1 t2)
  (let(
       (big1 (car t1))
       (big2 (car t2))
       (secs1 (cadr t1))
       (secs2 (cadr t2))
       (ms1 (caddr t1))
       (ms2 (caddr t2))
       )
    (or (and (>= big1 big2)
             (>= secs1 secs2)
             )
        (error "nkeys-roughly-subtract-time-in-microseconds: I assume t1 > t2")
        )
    (cond
     ((> big1 big2)
      1000000  ; a lot
      )
     ((> secs1 secs2)
      (if (> secs1 (+ secs2 1))
          1000000  ; a lot
        (setq ms1 (+ ms1 1000000))
        (- ms1 ms2)
        )
      )
     (t
      (- ms1 ms2)
      )
     )
    )
  )

(defun nkeys-line-noise-p(&optional minimum-ms-not-noise)
  nil

  ;; this is causing me more trouble than it is worth...
  ;;(if nkeys-fast-keys-expected
  ;;nil
  ;;(if (not minimum-ms-not-noise)
  ;;(setq minimum-ms-not-noise 80000))
  ;;(let(
  ;;is-noise
  ;;)
  ;;(if (and nkeys-line-noise-last-time
  ;;(eq last-command this-command)
  ;;(or (not (eq this-command 'n-complete-self-insert-command))
  ;;(eq last-command-event last-last-command-event)
  ;;)
  ;;)
  ;;(let(
  ;;(idleTime (nkeys-roughly-subtract-time-in-microseconds (current-time) nkeys-line-noise-last-time))
  ;;)
  ;;(if (< idleTime minimum-ms-not-noise)
  ;;(setq is-noise t)
  ;;)
  ;;(n-trace "nkeys-line-noise-p: ms since last: %d" (nkeys-roughly-subtract-time-in-microseconds (current-time) nkeys-line-noise-last-time))
  ;;)
  ;;)
  ;;(setq nkeys-line-noise-last-time (current-time))
  ;;(if is-noise
  ;;(message "Noisy keystroke detected..."))
  ;;is-noise
  ;;)
  ;;)
  )



(defmacro nkeys-define-key(map keyString mod func)
  (` (define-key (, map) (, keyString) '(lambda()
					  (interactive)
					  (if (, mod)
					      (require (, mod))
					    )
                                          (call-interactively (, func))
                                          )
       )
     )
  )

(defmacro nkeys-global-set-key-w-repeat(keyString mod func)
  (` (global-set-key (, keyString) '(lambda()
                                      (interactive)
                                      (if (, mod)
                                          (require (, mod))
                                        )
                                      (setq this-command (, func))
                                      (call-interactively (, func))
                                      )
                     )
     )
  )

(defmacro nkeys-global-set-key(keyString mod func)
  (` (global-set-key (, keyString) '(lambda()
                                      (interactive)
                                      (if (, mod)
                                          (require (, mod))
                                        )
                                      (setq this-command (, func))
                                      ;;(if (not (nkeys-line-noise-p))
                                      ;;(progn
                                      (call-interactively (, func))
                                      ;;)
                                      ;;)
                                      )
                     )
     )
  )

(defun nkeys-maybe-call(mod func)
  (interactive)
  (if mod
      (require mod))
  (call-interactively func)
  (message "222")
  )

(defun nkeys-hi()
  (interactive)
  (message "hi")
  )


(global-set-key "\C-x" 'Control-X-prefix)

;; alphabetize
(nkeys-global-set-key "\C-cv" 'nre 'nre-variablize)
(nkeys-global-set-key "\C-c1" 'nterminal 'nterminal-vmware-window-1280x1024)
(nkeys-global-set-key "\C-c2" 'nterminal 'nterminal-1280x1024)
(nkeys-global-set-key "\C-c7" 'nterminal 'nterminal-1024x768)
(nkeys-global-set-key "" nil 'quoted-insert)
(nkeys-global-set-key " " nil 'n-complete-or-space)
(nkeys-global-set-key "!" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "#" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "$" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "%" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "&" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "'" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "(" nil 'n-complete-self-insert-command)
(nkeys-global-set-key ")" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "*" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "+" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "," nil 'n-complete-self-insert-command)
(nkeys-global-set-key "-" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "." nil 'n-complete-self-insert-command)
(nkeys-global-set-key "/" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "0" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "1" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "2" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "3" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "4" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "5" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "6" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "7" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "8" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "9" nil 'n-complete-self-insert-command)
(nkeys-global-set-key ":" nil 'n-complete-self-insert-command)
(nkeys-global-set-key ";" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "<" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "=" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "=" nil 'nsimple-equal)
(nkeys-global-set-key ">" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "?" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "@" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "A" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "B" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "C" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "D" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "E" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "F" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "G" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "H" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "I" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "J" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "K" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "L" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "M" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "N" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "O" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "P" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "Q" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "R" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "S" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "T" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "U" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "V" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "W" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "X" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "Y" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "Z" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "[" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "\"" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "\C-a" nil 'nsimple-back-to-indentation)
(nkeys-global-set-key "\C-c," 'nc 'nc-beginning-of-defun)
(nkeys-global-set-key "\C-cC" nil 'capitalize-word)
(nkeys-global-set-key "\C-cD" 'njava 'nhtml-prepare-for-decorate)
(nkeys-global-set-key "\C-cE" 'nsql 'nsql-create-empty-import-file)
(nkeys-global-set-key "\C-cF" 'nsyb 'nsyb-add-to-faq)
(nkeys-global-set-key "\C-cG" 'n-mail 'n-mail-goto-c-mail-txt-and-gen-license)
(nkeys-global-set-key "\C-cH" 'nsyb 'nsyb-file-hdr)
(nkeys-global-set-key "\C-cK" 'nsql 'nsql-delete-all-rows)
(nkeys-global-set-key "\C-cM" 'n-mail 'n-mail-goto-c-mail-txt)
(nkeys-global-set-key "\C-cP" nil 'n-nuke-pdf-bs)
(nkeys-global-set-key "\C-cQ" 'nsql 'nsql-compress-output)
(nkeys-global-set-key "\C-cS" 'nsql 'nsql-suppress-table-conversion)
(nkeys-global-set-key "\C-cT" 'nsql 'nsql-goto-table-controller-entry)
(nkeys-global-set-key "\C-cX" nil 'nsimple-to-txt)
(nkeys-global-set-key "\C-cl" 'n-file 'n-file-ls)
(nkeys-global-set-key "\C-cL" 'n-file 'n-file-ls-backups)
(nkeys-global-set-key "\C-c\C-m" nil 'nsimple-marginalize-region-cmd)
(nkeys-global-set-key "\C-c\C-r" nil 'n-reboot)
(nkeys-global-set-key "\C-c\C-t" 'nteacher 'nmw-init-env)
(nkeys-global-set-key "\C-ca" 'n-file 'n-file-always-load)
(nkeys-global-set-key "\C-cb" 'njava 'nhtml-browse)
(nkeys-global-set-key "\C-cc" 'n-env 'n-env-set)
(nkeys-global-set-key "\C-cd" 'n-env 'n-env-add-file-to-shortcuts)
;;(nkeys-global-set-key "\C-cd" 'nsql 'nsql-drop-constraint)
(nkeys-global-set-key "\C-ce" 'n-make 'n-make-eval-pt)
;;(nkeys-global-set-key "\C-cg" 'nmw-data 'nmw-prep-to-generate-this-verb)
(nkeys-global-set-key "\C-cf" 'nform 'nform-substitute)
(nkeys-global-set-key "\C-ci" 'nst 'nst-import-trade-data)
(nkeys-global-set-key "\C-cI" 'nst 'nst-calculate-various-values)
(nkeys-global-set-key "\C-ck" 'nsql 'nsql-bad-foreign-key-cmd)
;;(nkeys-global-set-key "\C-cl" nil 'n-list-processes)
(nkeys-global-set-key "\C-cm" 'nsyb 'nsyb-cm-cmd)
(nkeys-global-set-key "\C-cn" nil 'n-next-line-safe)
(nkeys-global-set-key "\C-cq" 'nsql 'nsql-goto-baseline-query-output-cmd)
(nkeys-global-set-key "\C-cr" 'nsrc 'nsrc)
(nkeys-global-set-key "\C-cs" 'nsort 'nsort-buf)
(nkeys-global-set-key "\C-ct" 'ntags-find 'ntags-reinit)
(nkeys-global-set-key "\C-cu" nil 'nsimple-underline)
(nkeys-global-set-key "\C-cx" 'nmw 'nmw-misc)
(nkeys-global-set-key "\C-cR" 'n-file 'n-file-recover)
(nkeys-global-set-key "\C-cR" 'n-file 'n-file-recover)
(nkeys-global-set-key-w-repeat "\C-d" nil 'nsimple-delete-char)
(nkeys-global-set-key "\C-g" nil 'n-enlarge-window)
(nkeys-global-set-key-w-repeat "\C-h" nil 'backward-delete-char-untabify)
(nkeys-global-set-key "\C-j" nil 'nsimple-join-lines)
(nkeys-global-set-key "\C-k" nil 'nsimple-kill-to-end-of-line)
(nkeys-global-set-key "\C-l" 'n-mv-line 'n-mv-line)
(nkeys-global-set-key "\C-m" nil 'nsimple-newline-and-indent)
(nkeys-global-set-key-w-repeat "\C-n" nil 'n-next-line)
(nkeys-global-set-key "\C-o" nil 'n-open-line)
(nkeys-global-set-key-w-repeat "\C-p" nil 'n-prev-line)
(nkeys-global-set-key "\C-q" nil 'help-for-help)
(nkeys-global-set-key "\C-r" nil 'isearch-backward-regexp)
(nkeys-global-set-key "\C-s" 'nre 'nre-search)         ; isearch-forward-regexp)
(nkeys-global-set-key "\C-t" nil 'nsimple-transpose-chars)
(nkeys-global-set-key "\C-w" nil 'nsimple-kill-region)
(nkeys-global-set-key "\C-x " 'ngud 'ngud-break)
(nkeys-global-set-key "\C-x0" nil 'nsimple-register-0)
(nkeys-global-set-key "\C-x1" nil 'nsimple-register-1)
(nkeys-global-set-key "\C-x2" nil 'nsimple-register-2)
(nkeys-global-set-key "\C-x3" nil 'nsimple-register-3)
(nkeys-global-set-key "\C-x4" nil 'nsimple-register-4)
(nkeys-global-set-key "\C-x5" nil 'nsimple-register-5)
(nkeys-global-set-key "\C-x6" nil 'nsimple-register-6)
(nkeys-global-set-key "\C-x7" nil 'nsimple-register-7)
(nkeys-global-set-key "\C-x8" nil 'nsimple-register-8)
(nkeys-global-set-key "\C-x9" nil 'nsimple-register-9)
;;(nkeys-global-set-key "\C-x4d" 'ndcm 'ndcm-define-token)
;;(nkeys-global-set-key "\C-x4p" 'ndcm 'ndcm-punctuate-token)
;;(nkeys-global-set-key "\C-x4s" nil 'n-sleep)
(nkeys-global-set-key "\C-xB" 'nsh 'nsh-mode)
(nkeys-global-set-key "\C-xI" nil 'n-igrep)
(nkeys-global-set-key "\C-xM" 'nman 'nman-db-init)
(nkeys-global-set-key "\C-xS" nil 'set-variable)
(nkeys-global-set-key "\C-x\C-c" nil 'exit-recursive-edit)
(nkeys-global-set-key "\C-x\C-d" 'ndired 'ndired)
(nkeys-global-set-key "\C-x\C-k" 'n-file 'n-file-delete-cmd)
(nkeys-global-set-key "\C-x\C-l" 'nlog 'nlog-cmd)
(nkeys-global-set-key "\C-x\C-p" nil 'n-p)
(nkeys-global-set-key "\C-x\C-s" 'n-file 'n-file-save-cmd)
(nkeys-global-set-key "\C-x\C-t" nil 'nsimple-goto-trace)
(nkeys-global-set-key "\C-x\C-u" 'nlog 'nlog-file)
(nkeys-global-set-key "\C-x\C-v" 'n-file 'n-file-refresh-from-disk)
(nkeys-global-set-key "\C-x\C-z" 'nelisp 'nelisp-generate-e_-files)

(nkeys-global-set-key "\C-xa " 'narithmetic 'narithmetic-eat-space)
(nkeys-global-set-key "\C-xa+" 'narithmetic 'narithmetic-+)
(nkeys-global-set-key "\C-xaa" 'narithmetic 'narithmetic-add-number)
(nkeys-global-set-key "\C-xam" 'narithmetic 'narithmetic-minus-number)
(nkeys-global-set-key "\C-xa?" 'narithmetic 'narithmetic-divide-by-number)
(nkeys-global-set-key "\C-xa*" 'narithmetic 'narithmetic-multiply-by-number)
(nkeys-global-set-key "\C-xa-" 'narithmetic 'narithmetic--)
(nkeys-global-set-key "\C-xa%" 'narithmetic 'narithmetic-%)
(nkeys-global-set-key "\C-xa*" 'narithmetic 'narithmetic-*)
(nkeys-global-set-key "\C-xa/" 'narithmetic 'narithmetic-/)
(nkeys-global-set-key "\C-xa~" 'narithmetic 'narithmetic-1)
(nkeys-global-set-key "\C-xa0" 'narithmetic 'narithmetic-0)
(nkeys-global-set-key "\C-xa1" 'narithmetic 'narithmetic+1)
(nkeys-global-set-key "\C-xa2" 'narithmetic 'narithmetic-2)
(nkeys-global-set-key "\C-xa=" 'narithmetic 'narithmetic-=)
(nkeys-global-set-key "\C-xaG" 'narithmetic 'narithmetic-G)
(nkeys-global-set-key "\C-xad" 'narithmetic 'narithmetic-d)
(nkeys-global-set-key "\C-xaD" 'narithmetic 'narithmetic-decrement)
(nkeys-global-set-key "\C-xag" 'narithmetic 'narithmetic-g)
(nkeys-global-set-key "\C-xah" 'narithmetic 'narithmetic-help)
(nkeys-global-set-key "\C-xaI" 'narithmetic 'narithmetic-increment)
(nkeys-global-set-key "\C-xaL" 'narithmetic 'narithmetic-sum-last-column)
(nkeys-global-set-key "\C-xao" 'narithmetic 'narithmetic-op)
(nkeys-global-set-key "\C-xap" 'narithmetic 'narithmetic-power)
(nkeys-global-set-key "\C-xas" 'narithmetic 'narithmetic-sum)
(nkeys-global-set-key "\C-xaS" 'narithmetic 'narithmetic-show)
(nkeys-global-set-key "\C-xax" 'narithmetic 'narithmetic-x)
(nkeys-global-set-key "\C-xa\C-u" 'narithmetic 'narithmetic-set-arg)

(nkeys-global-set-key "\C-xaz1" nil 'nsimple-register-1)
(nkeys-global-set-key "\C-xaz2" nil 'nsimple-register-2)
(nkeys-global-set-key "\C-xaz3" nil 'nsimple-register-3)
(nkeys-global-set-key "\C-xd" 'ndiff 'ndiff)
(nkeys-global-set-key "\C-xf" nil 'forward-sexp)
(nkeys-global-set-key "\C-xh" nil 'split-window-horizontally)
(nkeys-global-set-key "\C-xi" 'n-indent 'n-indent-region)
(nkeys-global-set-key "\C-xj" nil 'njavascript-mode)
(nkeys-global-set-key "\C-xp" 'n-prune-buf 'n-prune-cmd)
(nkeys-global-set-key "\C-xr?" nil 'nsimple-register-help)
(nkeys-global-set-key "\C-xs" nil 'nsimple-sleep)

(nkeys-global-set-key "\C-xt" nil 'n-toggle)
(nkeys-global-set-key "\C-xT" nil 'n-sleep-for)
(nkeys-global-set-key "\C-xu" nil 'n-update-dir-in-file-db)
(nkeys-global-set-key "\C-xw" 'n-file 'n-file-toggle-read-onlyness)
(nkeys-global-set-key "\C-y" nil 'nsimple-yank-command)
(nkeys-global-set-key "\C-z" nil 'nsimple-scroll-down)
(nkeys-global-set-key "\M-" nil 'eval-expression)
(nkeys-global-set-key "\M-" nil 'n-cycle-env-groups)
(nkeys-global-set-key "\M-%" 'nre 'nre-query-replace)
(nkeys-global-set-key "\M-&" 'nre 'nre-with-arg)
(nkeys-global-set-key "\M-'" 'n-mail 'nkeys-n-rmail)
(nkeys-global-set-key "\M-," nil 'n-complete-beginning-of-buffer)
(nkeys-global-set-key "\M--" 'n-grab 'n-grab-file)
(nkeys-global-set-key "\M-." nil 'nsimple-end-of-buffer)
(nkeys-global-set-key "\M-/" nil 'nsimple-dabbrev-expand) ;; hippie-expand, doc pointers at http://trey-jackson.blogspot.com/2007/12/emacs-tip-5-hippie-expand.html, http://badbyteblues.blogspot.com/2007/12/hippie-expand-and-autocompletion-in.html
(nkeys-global-set-key "\M-0" nil 'n-delete-window)
(nkeys-global-set-key "\M-1" nil 'delete-other-windows)
(nkeys-global-set-key "\M-2" nil 'nsimple-split-window-vertically)
(nkeys-global-set-key "\M-6" nil 'digit-argument)
(nkeys-global-set-key "\M-7" 'nre 'nre)
(nkeys-global-set-key "\M-;" 'nm 'nm-end)
(nkeys-global-set-key "\M-<" 'nmerge 'nmerge)
(nkeys-global-set-key "\M-=" 'n-file 'n-file-save-cmd)
(nkeys-global-set-key "\M-?" 'nbuf 'nbuf-menu)
(nkeys-global-set-key "\M-'" 'n-2-lines 'n-2-lines)
(nkeys-global-set-key "\M-\"" 'n-2-lines 'n-2-lines-clone-file)

;;(nkeys-global-set-key "\M-\C-/" 'nsh 'nsh-gen-cygwin-fn-mapping-script)
;; for some reason my usual \M-\C-/ binding doesn't work.  But this does:
(define-key esc-map [?\C-/] 'nsh-gen-cygwin-fn-mapping-script)

(nkeys-global-set-key "\M-\C-a" 'n-env 'n-env-grap)
(nkeys-global-set-key "\M-\C-b" 'n-prune-buf 'n-prune-cmd)
(nkeys-global-set-key "\M-\C-c" 'n-env 'n-env-browse)
(nkeys-global-set-key "\M-\C-d" nil 'nsimple-downcase-word)
(nkeys-global-set-key "\M-\C-e" 'nelisp 'nelisp-scratch-init)
;;(nkeys-global-set-key "\M-\C-f" 'ngud 'ngud-hot-mode)
(nkeys-global-set-key "\M-\C-f" 'njava 'n-grab-and-decode)
;;(nkeys-global-set-key "\M-\C-g" 'ngud 'ngud)
(nkeys-global-set-key "\M-\C-g" 'nxfer 'nxfer-get)
(nkeys-global-set-key "\M-\C-h" 'nmidnight 'nmidnight-ext-choose)
(nkeys-global-set-key "\M-\C-i" nil 'nsimple-indent-cmd)
(nkeys-global-set-key "\M-\C-j" 'nxfer 'nxfer-put)
(nkeys-global-set-key "\M-\C-k" 'nelisp 'nelisp-goto-key-func)
(nkeys-global-set-key "\M-\C-l" 'nm 'nm-repeat-until-error)
(nkeys-global-set-key "\M-\C-m" 'n-mail 'n-mail)
(nkeys-global-set-key "\M-\C-n" 'nmw-data 'nmw-data-add-noun) ;;(nkeys-global-set-key "\M-\C-n" nil 'iconify-frame)
(nkeys-global-set-key "\M-\C-o" 'nclass-browser 'nclass-browser-command)
(nkeys-global-set-key "\M-\C-p" 'n-lpr 'n-lpr)
(nkeys-global-set-key "\M-\C-q" 'n-env 'n-env-grep-goto)
(nkeys-global-set-key "\M-\C-r" 'nm 'nm-do-as-asked)
;;(nkeys-global-set-key "\M-\C-s" 'nabbrev 'nabbrev-cmd)
(nkeys-global-set-key "\M-\C-s" nil 'n19-bisect-sees-failure)
(nkeys-global-set-key "\M-\C-t" nil 'nsimple-transpose-lines)
(nkeys-global-set-key "\M-\C-u" nil 'nsimple-upcase-word)
(nkeys-global-set-key "\M-\C-v" 'nm 'nm-execute-named-macro)
(nkeys-global-set-key "\M-\C-w" nil 'n-widen)
(nkeys-global-set-key "\M-\C-x" nil 'nsimple-compare-windows)
(nkeys-global-set-key "\M-\C-y" 'nmw-data 'nmw-data-reestablish-correction-buffers)
(nkeys-global-set-key "\M-\C-z" 'n-env 'n-env-grap-stacked)
(nkeys-global-set-key "\M-_" 'n-grab 'n-grab-file-at-next-slash)
(nkeys-global-set-key "\M-`" nil 'n-what-line-cmd)
;;(nkeys-global-set-key "\M-8" 'njava 'nhtml-enhance-timestamps)
(nkeys-global-set-key "\M-8" nil 'split-window-horizontally)
(nkeys-global-set-key "\M-9" 'njava 'njava-gen-sql-junit)
(nkeys-global-set-key "\M-a" 'nm 'nm-begin)
(nkeys-global-set-key-w-repeat "\M-b" nil 'nsimple-backward-word)
(nkeys-global-set-key "\M-c" 'nmidnight 'nmidnight-compile)
(nkeys-global-set-key "\M-d" nil 'nsimple-kill-word)
(nkeys-global-set-key "\M-e" 'n-next-error 'n-next-error-command)
(nkeys-global-set-key-w-repeat "\M-f" nil 'nsimple-forward-word)
(nkeys-global-set-key "\M-g" nil 'nsimple-grab)
(nkeys-global-set-key "\M-h" nil 'n-top-of-window)
(nkeys-global-set-key "\M-i" nil 'nsimple-tab)
(nkeys-global-set-key "\M-j" nil 'n-other-window)
(nkeys-global-set-key "\M-k" nil 'nsimple-kill-line)
(nkeys-global-set-key "\M-l" nil 'n-bottom-of-window)
(nkeys-global-set-key "\M-m" 'nbuf 'nbuf-cycle)
(nkeys-global-set-key "\M-o" 'n-loc 'n-loc-pop)
(nkeys-global-set-key "\M-p" nil '@@)
(nkeys-global-set-key "\M-q" 'nbuf 'nbuf-kill-current)

(nkeys-global-set-key "\M-r" 'nm 'nm-do)
(nkeys-global-set-key "\M-s" nil 'nshell)
(nkeys-global-set-key "\M-t" nil 'nsimple-transpose-words)
(nkeys-global-set-key "\M-u" 'n-loc 'n-loc-push)
(nkeys-global-set-key "\M-w" 'ntags-find 'ntags-find-where)
(nkeys-global-set-key "\M-x" 'nfly 'nfly-find-file-shell)
(nkeys-global-set-key "\M-y" 'nsimple 'nsimple-yank-pop-command)
(nkeys-global-set-key "\M-z" nil 'nsimple-scroll-up)
(nkeys-global-set-key "\\" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "\t" nil 'n-complete-leap)
(nkeys-global-set-key "]" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "^" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "_" nil 'n-complete-self-insert-command)
;;(nkeys-global-set-key "`" nil 'n-complete-insert-class-name-or-insert-back-apostrophe)
(nkeys-global-set-key "a" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "b" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "c" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "d" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "e" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "f" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "g" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "h" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "i" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "j" nil 'n-complete-self-insert-command)

(nkeys-global-set-key "k" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "l" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "m" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "n" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "o" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "p" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "q" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "r" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "s" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "t" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "u" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "v" nil 'n-complete-self-insert-command)

(nkeys-global-set-key "w" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "x" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "y" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "z" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "{" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "|" nil 'n-complete-self-insert-command)

(nkeys-global-set-key "}" nil 'n-complete-self-insert-command)
(nkeys-global-set-key "~" nil 'n-complete-self-insert-command)
;;(nkeys-global-set-key-w-repeat "" nil 'nsimple-backward-delete-char-untabify)

;;(nkeys-global-set-key-w-repeat "" nil 'backward-delete-char-untabify)
(nkeys-global-set-key [down-mouse-1] nil 'nsimple-eat-mouse-click)
(setq nkeys-interactive-bind-last-mode "")

(defun nkeys-interactive-bind2( setting func mode override)
  (interactive)
  (n-file-push "$dp/emacs/lisp/nkeys.el")
  (goto-char (point-min))
  (let(
       notFound
       )
    (condition-case nil
        (search-forward setting)
      (error
       (setq notFound t)
       )
      )
    (if (or notFound override)
        (progn
          (if notFound
              (progn
                (goto-char (point-min))
                (n-s mode)
                )
            )
          (forward-line 0)
          (insert (format "%s '%s)\n" setting func))
          (nelisp-compile)
          (if (not override)
              (n-file-pop))
          t
          )
      )
    )
  )

(defun nkeys-regexp-evaluator()
  (interactive)
  (if (string-match "^ \\*Minibuf"  (buffer-name))
      (call-interactively 'self-insert-command)
    (let(
	 binding
	 (bindings	(nkeys-database-get "nkeys-regexp" (this-command-keys) t))
	 function
	 )
      (save-excursion
	(save-restriction
	  (narrow-to-region (point) (progn
				      (forward-line 0)
				      (point)
				      )
			    )
	  (goto-char (point-min))
	  (while (and bindings
		      (progn
			(setq binding (car bindings))
			(if (looking-at (nkeys-regexp-binding-regexp binding))
			    nil	; break loop
			  (setq bindings (nkeys-regexp-binding-function bindings))
			  )
			)
		      )
	    )
	  (setq function (cdr binding))
	  )
	(or function (error "nkeys-regexp-evaluator: no binding"))
	)
      (call-interactively function)
      )
    )
  )
(defun nkeys-regexp-binding-regexp(regexp-binding)
  (car regexp-binding)
  )
(defun nkeys-regexp-binding-function(regexp-binding)
  (cdr regexp-binding)
  )
(defun nkeys-add-regexp-binding(mode-map key regexp function)
  (let(
       (bindings	(nkeys-database-get "nkeys-regexp" key mode-map))
       )
    (nkeys-database-set "nkeys-regexp" key
                        (append bindings
                                (list
                                 (cons regexp function)
                                 )
                                )
                        mode-map
                        )
    )
  )
(defun nkeys-clear-regexp-bindings(mode-map key)
  (nkeys-database-set "nkeys-regexp" key nil mode-map)
  )

(defun nkeys-remove-temporary-bindings(&optional exitKey)
  (interactive)
  (if (not exitKey)
      (setq exitKey		(this-command-keys)))
  (let(
       (temporaryKeys	(nkeys-database-get "nkeys-temporary" exitKey))
       )
    (while temporaryKeys
      (local-set-key (car temporaryKeys) (cadr temporaryKeys))
      (setq temporaryKeys (cddr temporaryKeys))
      )
    )
  (nkeys-database-set "nkeys-temporary" exitKey nil)
  )
(defun nkeys-bind-temporarily(exitKey key function &optional callerWillRemoveBindings)
  (let(
       (temporaryKeys	(nkeys-database-get "nkeys-temporary" key))
       )
    (if (and
         ;; this routine could be called repeatedly with the same exitKey.
         ;; The exitKey should be recorded only one time.
         (not temporaryKeys)
         
         ;;  if the caller is going to take care of removing the temporary
         ;; bindings, then we don't need to remember the exitKey at all.
         (not callerWillRemoveBindings)
         )
        (setq temporaryKeys (list exitKey (nkeys-binding exitKey)))
      )
    (nkeys-database-set "nkeys-temporary" exitKey
                        (append
                         (list key (key-binding key))
                         temporaryKeys
                         )
                        )
    )
  (if (not callerWillRemoveBindings)
      (local-set-key exitKey 'nkeys-remove-temporary-bindings))
  (local-set-key key function)
  )



(add-hook 'buffer-menu-mode-hook 'nkeys-Buffer-menu-hook)
(defun nkeys-Buffer-menu-hook()
  (require 'nbuf)
  ;; alphabetize
  (nkeys-define-key Buffer-menu-mode-map " " nil 'Buffer-menu-unmark)
  (nkeys-define-key Buffer-menu-mode-map "," 'nfly 'nfly-jump)
  (nkeys-define-key Buffer-menu-mode-map "0" 'nbuf 'nbuf-edit-n-command)
  (nkeys-define-key Buffer-menu-mode-map "1" 'nbuf 'nbuf-edit-n-command)
  (nkeys-define-key Buffer-menu-mode-map "2" 'nbuf 'nbuf-edit-n-command)
  (nkeys-define-key Buffer-menu-mode-map "3" 'nbuf 'nbuf-edit-n-command)
  (nkeys-define-key Buffer-menu-mode-map "4" 'nbuf 'nbuf-edit-n-command)
  (nkeys-define-key Buffer-menu-mode-map "5" 'nbuf 'nbuf-edit-n-command)
  (nkeys-define-key Buffer-menu-mode-map "6" 'nbuf 'nbuf-edit-n-command)
  (nkeys-define-key Buffer-menu-mode-map "7" 'nbuf 'nbuf-edit-n-command)
  (nkeys-define-key Buffer-menu-mode-map "8" 'nbuf 'nbuf-edit-n-command)
  (nkeys-define-key Buffer-menu-mode-map "9" 'nbuf 'nbuf-edit-n-command)
  (nkeys-define-key Buffer-menu-mode-map "C" 'nbuf 'nbuf-cite)
  (nkeys-define-key Buffer-menu-mode-map "D" 'nbuf 'nbuf-del-file)
  (nkeys-define-key Buffer-menu-mode-map "P" 'nbuf 'nbuf-lpr)
  (nkeys-define-key Buffer-menu-mode-map "\C-m" nil 'Buffer-menu-execute)
  (nkeys-define-key Buffer-menu-mode-map "c" 'nbuf 'nbuf-compile-lisp)
  (nkeys-define-key Buffer-menu-mode-map "d" 'nbuf 'nbuf-del-buf)
  (nkeys-define-key Buffer-menu-mode-map "e" 'nbuf 'nbuf-edit)
  (nkeys-define-key Buffer-menu-mode-map "k" 'nbuf 'nbuf-kill-from-bufed)
  (nkeys-define-key Buffer-menu-mode-map "m" 'nsimple 'nsimple-macro-on-file)
  (nkeys-define-key Buffer-menu-mode-map "n" nil 'next-line)
  (nkeys-define-key Buffer-menu-mode-map "p" nil 'previous-line)
  (nkeys-define-key Buffer-menu-mode-map "s" 'nbuf 'nbuf-save)
  (nkeys-define-key Buffer-menu-mode-map "\M-s" 'nshell 'nshell)
  )




(defun nkeys-c-hook(mode-map)
  ;; alphabetize
  (define-key mode-map "	"	nil)
  (define-key mode-map " "	nil)
  (define-key mode-map ","	nil)
  (define-key mode-map "-"	nil)
  (define-key mode-map "/"	nil)
  (define-key mode-map ":"	nil)
  (define-key mode-map ";"	nil)
  (define-key mode-map "<"	nil)
  (define-key mode-map "="	nil)
  (define-key mode-map ">"	nil)
  (define-key mode-map "\C-a"	nil)
  (define-key mode-map "\C-c\C-l"	nil)
  (define-key mode-map "\C-j"	nil)
  (define-key mode-map "\C-x " 	nil)
  (define-key mode-map "\M-%"	nil)
  (define-key mode-map "\M-\""	nil)
  (define-key mode-map "\M-\C-a"	nil)
  (define-key mode-map "\M-\C-h"	nil)
  (define-key mode-map "\M-\C-q"	nil)
  (define-key mode-map "\M-\C-z"	nil)
  (define-key mode-map "\M-a"	nil)
  (define-key mode-map "\M-e"	nil)
  (define-key mode-map "\M-q"	nil)
  (nkeys-define-key mode-map "\C-c@"	'nc		'nc-check-pointers)
  (nkeys-define-key mode-map "\C-cE"	'nc		'nc-generate-enumerator)
  (nkeys-define-key mode-map "\C-cH"	'nsyb		'nsyb-file-hdr)
  (nkeys-define-key mode-map "\C-cI"	'nc		'nc-show-includes)
  (nkeys-define-key mode-map "\C-cS"	'nc		'nc-stringify)
  (nkeys-define-key mode-map "\C-c\C-c"	'nc		'nc-declare-class-at-header-top)
  (nkeys-define-key mode-map "\C-c\C-d"	'nc		'nc-define)
  (nkeys-define-key mode-map "\C-c\C-p"	'nprototype	'nprototype)
  (nkeys-define-key mode-map "\C-c\C-s"	'nc		'nc-declare-static-instance)
  (nkeys-define-key mode-map "\C-c\C-t"	'nc		'nc-class-add-runtime-type)
  (nkeys-define-key mode-map "\C-cf" 	nil		'find-tag)
  (nkeys-define-key mode-map "\C-cg"	'nc		'nc-gen-set-and-get-methods)
  (nkeys-define-key mode-map "\C-ch"	'nsyb		'nsyb-hdr)
  (nkeys-define-key mode-map "\C-ci"	'nc		'nc-include)
  (nkeys-define-key mode-map "\C-ck"	'nc		'nc-kill-block)
  (nkeys-define-key mode-map "\C-cn"	'nc		'nc-goto-proc-hdr)
  (nkeys-define-key mode-map "\C-cp"	'nc		'nc-declare-auto-pointer)
  (nkeys-define-key mode-map "\C-c{"	'nc		'nc-add-curlies-cmd)
  (nkeys-define-key mode-map "\C-i"	'nc-declaration	'nc-declaration-indent)
  (nkeys-define-key mode-map "\C-j"	'nc		'nc-join-lines)
  (nkeys-define-key mode-map "\C-xJ"	'ngud		'ngud-jump)
  (nkeys-define-key mode-map "\C-xg"	'ngud		'ngud-cmds)
  (nkeys-define-key mode-map "\C-xk"	'nc		'nc-ansi-to-kr)
  (nkeys-define-key mode-map "\M-#"	'nc		'nc-ifdef)
  (nkeys-define-key mode-map "\M-_"	'n-comment	'n-comment-routine)
  (nkeys-define-key mode-map "\M-\C-z"	'nc		'nc-imitate)
  (nkeys-define-key mode-map "{"	'nc		'nc-brace)
  )


;;(n19-bisect (concat dp "/emacs/lisp/nkeys.el"))

(add-hook 'comint-mode-hook 'nkeys-comint-hook)
(defun nkeys-comint-hook()
  (nkeys-define-key comint-mode-map "\M-s" 'nshell 'nshell)
  (nkeys-define-key comint-mode-map "\M-t" 'nsimple 'nsimple-transpose-words)
  (nkeys-define-key comint-mode-map "\C-a" 'nsimple 'nsimple-back-to-indentation)
  (nkeys-define-key comint-mode-map "\C-d" 'nsimple 'nsimple-delete-char)
  )
(add-hook 'lisp-interaction-mode-hook 'nkeys-lisp-interaction-hook)

(defun nkeys-lisp-interaction-hook()
  (require 'nelisp)
  (nkeys-define-key lisp-interaction-mode-map "\M-c" 'n-scratch 'n-scratch-compile)
  )
(add-hook 'mail-mode-hook 'nkeys-mail-hook)
(defun nkeys-mail-hook()
  (require 'n-mail)
  ;; alphabetize
  (nkeys-define-key mail-mode-map "	" 'n-complete 'n-complete-leap)
  (nkeys-define-key mail-mode-map "\C-i" 'nsimple 'nsimple-indent-cmd)
  (nkeys-define-key mail-mode-map "\C-c\C-c" 'n-mail 'n-mail-send-and-exit)
  (nkeys-define-key mail-mode-map "\C-c\C-s" 'n-mail 'n-mail-save-send-and-exit)
  (nkeys-define-key mail-mode-map "\C-c\C-y" 'n-mail 'n-mail-yank-original)
  (nkeys-define-key mail-mode-map "\M-\C-d" 'n-mail 'n-mail-clean)
  (nkeys-define-key mail-mode-map "\M-\C-r" 'n-mail 'n-mail-record-ff)
  )

;;(nkeys-define-key nps-mode-map "\M-c" 'nps 'nps-go)
;;(nkeys-define-key nps-mode-map "d" 'nps 'nps-kill)
;;(nkeys-define-key nps-mode-map "n" 'n-next 'n-next-line)
;;(nkeys-define-key nps-mode-map "p" 'n-prev 'n-prev-line)
;;(nkeys-define-key nps-mode-map "u" 'nps 'nps-undo)
(add-hook 'nroff-mode-hook 'nkeys-nroff-hook)
(defun nkeys-nroff-hook()
  (nkeys-define-key nroff-mode-map "	" 'n-complete 'n-complete-leap)
  (nkeys-define-key nroff-mode-map "\C-j" 'nsimple 'nsimple-join-lines)
  (nkeys-define-key nroff-mode-map "\M-?" 'nbuf 'nbuf-menu)
  (nkeys-define-key nroff-mode-map "\M-s" 'nshell 'nshell)
  )
(add-hook 'rmail-mode-hook 'nkeys-rmail-hook)
(defun nkeys-rmail-hook()
  (require 'n-mail)
  ;; alphabetize
  (nkeys-define-key rmail-mode-map "P" 'n-rmail 'n-rmail-lpr)
  (nkeys-define-key rmail-mode-map "X" 'n-rmail 'n-rmail-bs-prune)
  (nkeys-define-key rmail-mode-map "\C-c\C-d" 'n-mail 'n-mail-i-am-done)
  (nkeys-define-key rmail-mode-map "\C-c\C-m" 'n-rmail 'n-rmail-misc)
  (nkeys-define-key rmail-mode-map "\C-d" nil 'nsimple-delete-char)
  (nkeys-define-key rmail-mode-map "\C-n" 'n-next 'n-next-line)
  (nkeys-define-key rmail-mode-map "\C-p" 'n-prev 'n-prev-line)
  (nkeys-define-key rmail-mode-map "\M-_" 'n-grab 'n-grab-file-at-next-slash)
  (nkeys-define-key rmail-mode-map "\M-?" 'n-mail 'n-mail-question)
  (nkeys-define-key rmail-mode-map "\M-\C-a" 'n-env 'n-env-grap)
  (nkeys-define-key rmail-mode-map "\M-\C-z" 'n-env 'n-env-grap-stacked)
  (nkeys-define-key rmail-mode-map "\M-m" 'nbuf 'nbuf-cycle)
  (nkeys-define-key rmail-mode-map "\M-q" 'n-rmail 'n-rmail-kill)
  (nkeys-define-key rmail-mode-map "\M-s" 'nshell 'nshell)
  (nkeys-define-key rmail-mode-map "d" 'n-h 'n-h-rmail-summary-delete-forward)
  (nkeys-define-key rmail-mode-map "h" 'n-rmail 'n-rmail-summary)
  (nkeys-define-key rmail-mode-map "s" 'n-rmail 'n-rmail-save)
  (nkeys-define-key rmail-mode-map "t" 'nsimple 'nsimple-absorb)
  )

;;(nkeys-define-key rmail-mode-map "\C-cm" 'nsyb 'nsyb-rmail-chi)

(load "nruby")
(add-hook 'ruby-mode-hook 'nruby-mode-hook)

(add-hook 'rmail-summary-mode-hook 'nkeys-rmail-summary-hook)

(defun nkeys-rmail-summary-hook()
  (require 'n-mail)
  ;; alphabetize
  (nkeys-define-key rmail-summary-mode-map "P" 'n-rmail 'n-rmail-summary-lpr)
  (nkeys-define-key rmail-summary-mode-map "R" 'n-rmail 'n-rmail-summary-reply-all)
  (nkeys-define-key rmail-summary-mode-map "\C-c\C-d" 'n-mail 'n-mail-summary-i-am-done)
  (nkeys-define-key rmail-summary-mode-map "\C-cm" 'nsyb 'nsyb-rmail-summary-chi)
  (nkeys-define-key rmail-summary-mode-map "\M- " 'n-rmail 'n-rmail-scroll-down-other)
  (nkeys-define-key rmail-summary-mode-map "\M-m" 'nbuf 'nbuf-cycle)
  (nkeys-define-key rmail-summary-mode-map "\M-q" 'n-rmail 'n-rmail-kill)
  (nkeys-define-key rmail-summary-mode-map "\M-s" 'nshell 'nshell)
  (nkeys-define-key rmail-summary-mode-map "a" nil 'error)
  (nkeys-define-key rmail-summary-mode-map "b" nil 'error)
  (nkeys-define-key rmail-summary-mode-map "d" 'n-rmail 'n-rmail-summary-delete-forward)
  (nkeys-define-key rmail-summary-mode-map "f" 'n-rmail 'n-rmail-summary-forward)
  (nkeys-define-key rmail-summary-mode-map "m" nil 'error)
  (nkeys-define-key rmail-summary-mode-map "o" nil 'error)
  (nkeys-define-key rmail-summary-mode-map "r" 'n-rmail 'n-rmail-summary-reply)
  (nkeys-define-key rmail-summary-mode-map "s" 'n-rmail 'n-rmail-summary-save)
  (nkeys-define-key rmail-summary-mode-map "t" 'nsimple 'nsimple-absorb)
  (nkeys-define-key rmail-summary-mode-map "t" nil 'error)
  )


(add-hook 'shell-mode-hook 'nkeys-shell-hook)
(defun nkeys-shell-hook()
  (require 'nshell)
  (nkeys-define-key shell-mode-map "" 'nshell 'nshell-backward-delete-char-untabify)
  (nkeys-define-key shell-mode-map "	" 'n-complete 'n-complete-leap)
  (nkeys-define-key shell-mode-map "\C-c\C-d" 'nshell 'nshell-exit)
  (nkeys-define-key shell-mode-map "\C-ch" 'nshell 'nshell-history)
  (nkeys-define-key shell-mode-map "\C-c\C-c" 'nshell 'nshell-ctrl-c)
  ;;(nkeys-define-key shell-mode-map "\C-c\C-m" 'nsql 'nsql-grab-and-select)            ; leads to bogus SQLOUT dir being created
  (nkeys-define-key shell-mode-map "\C-c\C-s" 'nshell 'nshell-bu)
  (nkeys-define-key shell-mode-map "\C-cm" 'nsyb 'nsyb-shell-cmd)
  ;;(nkeys-define-key shell-mode-map "\C-cc" 'n-host 'n-host-edit-secondary-init-file)
  (nkeys-define-key shell-mode-map "\C-cn" 'n-host 'n-host-edit-init-file)
  (if n-win
      (progn
        (nkeys-define-key shell-mode-map "\C-d" nil 'nsimple-delete-char)
        )
    )
  (nkeys-define-key shell-mode-map "\C-m" 'nshell 'nshell-send-input)
  (nkeys-define-key shell-mode-map "\C-xP" 'n-host 'n-host-pw)
  (nkeys-define-key shell-mode-map "\C-xe" 'nshell 'nshell-eval-region)
  (nkeys-define-key shell-mode-map "\C-x\C-e" 'nsh 'nsh-evaluate-last-expression)
  (nkeys-define-key shell-mode-map "\C-xR" 'n-host 'n-host-su-cmd)
  (nkeys-define-key shell-mode-map "\C-xT" nil 'n-sleep-for)
  ;;(nkeys-define-key shell-mode-map "\C-xY" 'n-relogin 'n-relogin-as-sybase)
  ;;(nkeys-define-key shell-mode-map "\C-x\C-p" 'nps 'nps-start)
  (nkeys-define-key shell-mode-map "\C-xi" 'nshell 'nshell-isql)
  (nkeys-define-key shell-mode-map "\C-xr" 'nshell 'nshell-repeat)
  (nkeys-define-key shell-mode-map "\M-=" 'nshell 'nshell-clear)
  (nkeys-define-key shell-mode-map "\M-b" 'nshell 'nshell-backword-word)
  (nkeys-define-key shell-mode-map "\M-e" 'nshell 'nshell-error-diagnose)
  (nkeys-define-key shell-mode-map "\M-?" 'nbuf 'nbuf-menu)
  (nkeys-define-key shell-mode-map "\M-\C-d" 'n-host 'n-host-del)

  ;;(nkeys-define-key shell-mode-map "\M-\C-l" 'n-host 'n-host-login-cmd)
  (nkeys-define-key shell-mode-map "\M-\C-l" 'nm 'nm-repeat-until-error)
  ;;(nkeys-define-key shell-mode-map "\M-\C-p" 'nshell 'nshell-xx)

  ;;(nkeys-define-key shell-mode-map "\M-\C-x" 'n-host 'n-host-cycle)

  (nkeys-define-key shell-mode-map "\M-k" 'nshell 'nshell-kill-line-and-maybe-rm)
  (nkeys-define-key shell-mode-map "\M-p" 'nshell 'nshell-comint-previous-input)
  (nkeys-define-key shell-mode-map "\M-n" 'nshell 'nshell-comint-next-input)
  (nkeys-define-key shell-mode-map "\M-r" 'nm 'nm-do)
  (nkeys-define-key shell-mode-map "\M-s" 'nshell 'nshell)
  (nkeys-define-key shell-mode-map "\M-t" 'nsimple 'nsimple-transpose-words)
  )

;;n19-bisect
(add-hook 'text-mode-hook '(lambda()
                             (nkeys-define-key text-mode-map "\M-s" 'nshell 'nshell)
                             (define-key text-mode-map " " 'self-insert-command)
                             (define-key text-mode-map "\t" 'n-complete-leap)
                             )
          )
(add-hook 'debugger-mode-hook '(lambda()
                                 (nkeys-define-key debugger-mode-map "Q" 'n-recursive 'n-recursive-kill-emacs-maybe)
                                 )
 )



(defun nkeys-interactive-bind()
  (interactive)
  (let(
       (func	(n-defun-name))
       (mode	(read-string "mode? " nkeys-interactive-bind-last-mode))
       (key	(nkey-read-sequence "key:"))
       setting
       searchSetting
       )
    (setq nkeys-interactive-bind-last-mode mode)
    (nlog-lisp)
    (if (string-match " \\(.*\\)" mode)
        (setq mode (n--pat 1 mode)))   ; remove DragonDictate's space
    (setq mode (cond
                ((string= mode "") "(nkeys-global-set-key ")
                ((string= mode "l") "(nelisp-define-key ")
                (t	(concat "(nkeys-define-key " mode "-mode-map "))
                )
	  module	(nfn-prefix)
          setting 	(concat mode "\""	key "\" '" module)
	  )
    (nkeys-interactive-bind2 setting func mode t)
    
    (switch-to-buffer-other-window "nkeys.el")
    )
  )

(defun nkey-clean(key)
  (cond
   ((and (integerp key) (<= key 26) (>= key 1))
    (format "\\C-%c" (+ key 96))
    )
   ((and (integerp key) (<= key -134217606) (>= key -134217631))
    (format "\\M-%c" (+ (+ key 134217606) 97))
    )
   ((stringp key)
    (let(
	 (s1 key)
	 len
	 (x1	0)
	 (x2	0)
	 (s2	"")
	 c1
	 )
      (setq len	(length s1))
      (while   (> len x1)
	(setq c1 (elt s1 x1)
	      s2 (concat s2
			 (cond
			  ((and (> c1 128) (< c1 155))
			   (format "\\M-\\C-%c" (+ c1 (- 96 128))
				   )
			   )
			  ((> c1 127)
			   (format "\\M-%c" (- c1 128))
			   )
			  ((<= c1 26)
			   (format "\\C-%c" (+ c1 96))
			   )
			  ((<= c1 27)
			   (format "\\M-")
			   )
			  ((= c1 ?\")
			   "\\\"")
			  ((= c1 ?\\)
			   "\\\\")
			  (t
			   (format "%c" c1)
			   )
			  )             ; cond
			 )
	      )
	(setq               x1 (1+ x1))
	)
      s2
      )
    )
   )
  )
(defun nkey-read-sequence( prompt)
  (nkey-clean
   (read-key-sequence prompt)
   )
  )


(defun nkeys-bind(mode-map key mod function &optional regexp)
  (cond
   ((not regexp)
    (if mode-map
        (nkeys-define-key (eval mode-map) key mod function)
      (nkeys-global-set-key key mod function)
      )
    )
   (mode-map
    (nkeys-define-key (eval mode-map) key nil mod 'nkeys-regexp-evaluator)
    (nkeys-add-regexp-binding mode-map key regexp function)
    )
   (t
    (nkeys-global-set-key key nil 'nkeys-regexp-evaluator)
    (nkeys-add-regexp-binding nil key regexp function)
    )
   )
  )

(nkeys-clear-regexp-bindings nil ",")
(nkeys-bind nil "," 'nfly 'nfly-jump "^[ \t]*$")
(nkeys-bind nil "," nil   'self-insert-command "")

(nkeys-clear-regexp-bindings nil "`")
;;(nkeys-bind nil "`" nil 'n-complete-insert-class-name-or-insert-back-apostrophe "^[ \t]*$")
(nkeys-bind nil "`" nil 'self-insert-command "")
;;
;;(nkeys-clear-regexp-bindings c-mode-map "#")
;;(nkeys-bind c-mode-map "#" 'nc-declaration 'nc-declaration-indent nc-declaration-data-regexp)
;;(nkeys-bind c-mode-map "#" 'self-insert-command "")
;;
;;(nkeys-clear-regexp-bindings c-mode-map "C")
;;(nkeys-bind c-mode-map "C" 'nsyb 'nsyb-declaration "^$")
;;(nkeys-bind c-mode-map "C" 'self-insert-command "")
;;
;;(nkeys-clear-regexp-bindings c-mode-map "D")
;;(nkeys-bind c-mode-map "D" nil 'nc 'nc-declare-local-data "^$")
;;(nkeys-bind c-mode-map "D" 'self-insert-command "")

(defun nkeys-binding(keyString)
  (let(
       (func (key-binding keyString))
       )
    (intern-soft (n--get-lisp-func-name func))
    )
  )


;;(defun nkey-map-keys(map func ordinaryKeys)
;;  (let(
;;       (len (length ordinaryKeys))
;;       (j 0)
;;       )
;;    (while (< j len)
;;      (nkeys-define-key map
;;			(substring ordinaryKeys j (1+ j))
;;			nil
;;			func)
;;      (setq j (1+ j))
;;      )
;;    )
;;  map
;;  )
(nkeys-define-key minibuffer-local-completion-map " " nil 'minibuffer-complete)

;; nkeys-define-key calls call-interactively,which breaks out of isearch mode.  No good for these settings:
(define-key isearch-mode-map "\C-w" 'nsimple-search-command-kill-region)
(define-key isearch-mode-map "\C-y" 'nsimple-search-command-yank)
(define-key isearch-mode-map "\C-z" 'isearch-yank-word)
(define-key isearch-mode-map "\M-z" 'isearch-yank-line)



(nkeys-define-key text-mode-map "\M-" nil 'eval-expression)
(nkeys-define-key text-mode-map "\M-\C-i" nil 'nsimple-indent-cmd)

;;(global-set-key [f1] '(lambda() (interactive) (call-interactively (nkeys-binding "\M-1"))))
;;(global-set-key [f2] '(lambda() (interactive) (call-interactively (nkeys-binding "\M-2"))))
;;(global-set-key [f3] '(lambda() (interactive) (call-interactively (nkeys-binding "\M-3"))))
;;(global-set-key [f4] '(lambda() (interactive) (call-interactively (nkeys-binding "\M-4"))))
;;(global-set-key [f5] '(lambda() (interactive) (call-interactively (nkeys-binding "\M-5"))))
;;(global-set-key [f6] '(lambda() (interactive) (call-interactively (nkeys-binding "\M-6"))))
;;(global-set-key [f7] '(lambda() (interactive) (call-interactively (nkeys-binding "\M-7"))))
;;(global-set-key [f8] '(lambda() (interactive) (call-interactively (nkeys-binding "\M-8"))))
;;(global-set-key [f9] '(lambda() (interactive) (call-interactively (nkeys-binding "\M-9"))))
;;(global-set-key [f10] '(lambda() (interactive) (call-interactively (nkeys-binding "\M-0"))))
(if n-is-xemacs
    (global-set-key 'button1 'mouse-track))
