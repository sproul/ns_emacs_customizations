(provide 'nfiles)
(if (not (boundp 'nfiles-mode-map))
    (progn
      (setq nfiles-mode-map	(make-sparse-keymap))
      )
  )
(defun nfiles-mode-meat()
  (setq major-mode 'nfiles-mode
        mode-name "nfiles mode"
        )
  (use-local-map nfiles-mode-map)
  (define-key nfiles-mode-map "\M-c" 'nfiles-go)
  (define-key nfiles-mode-map "d" 'nfiles-tag-for-rm)
  (define-key nfiles-mode-map "e" 'nfiles-edit)
  (define-key nfiles-mode-map "i" 'nfiles-prune-and-organize)
  (define-key nfiles-mode-map "l" 'nfiles-ncp_to_l)
  (define-key nfiles-mode-map "o" 'nfiles-ok-toggle)
  )
(defun nfiles-oks-fn(fn)
  (concat fn ".ok")
  )
(defun nfiles-oks-get()
  (save-window-excursion
    (n-file-push (nfiles-oks-fn (buffer-file-name)))
    (let(
         oks
         )
      (goto-char (point-min))
      (while (not (eobp))
        (setq oks (cons (n-get-line) oks))
        (forward-line 1)
        )
      (prog1
          oks
        (n-file-pop)
        )
      )
    )
  )
(defun nfiles-compress-dir()
  (let(
       (dir	(n-get-line))
       )
    (forward-line 0)
    (insert (format "%s\n" dir))
    (while (looking-at dir)
      (nsimple-delete-line))
    )
  )
(defun nfiles-oks-prune()
  (require 'n-prune-buf)
  (let(
       (oks (nfiles-oks-get))
       )
    (while oks
      (n-prune-buf (car oks))
      (setq oks (cdr oks))
      )
    )
  )
(defun nfiles-oks-load()
  (let(
       (oks (nfiles-oks-get))
       )
    (goto-char (point-max))
    (while oks
      (insert "ok " (car oks) "\n")
      (setq oks (cdr oks))
      )
    )
  )
(defun nfiles-prune-and-organize()
  (interactive)
  
  (goto-char (point-min))
  (while (n-s "/OBJECTS$")
    (nfiles-compress-dir))
  
  (goto-char (point-min))
  (while (n-s "/DEVOBJECTS$")
    (nfiles-compress-dir))
  
  (require 'n-prune-buf)
  (n-prune-buf "make\\.search")
  (n-prune-buf "README")
  (nfiles-oks-prune)
  (nfiles-oks-load)  
  (goto-char (point-min))
  )
(defun nfiles-edit()
  (interactive)
  (n-file-find (n-get-line))
  )
(defun nfiles-ok-toggle()
  (interactive)
  (require 'n-prune-buf)
  (forward-line 0)
  (let(
       (rm	(looking-at "ok "))
       (fn	(n-get-line))
       )
    (if rm
        (progn
          (setq fn (substring fn 3))
          (forward-line 0)
          (delete-char (length "ok "))
          )
      (n-prune-buf fn)
      (forward-line 0)
      (insert "ok " fn "\n")
      )
    (n-file-push (nfiles-oks-fn (buffer-file-name)))
    (if rm
        (progn
          (goto-char (point-min))
          (n-s (concat "^" fn "$") t)
          (nsimple-delete-line)
          )
      (forward-line 0)
      (insert fn "\n")
      )
    (save-buffer)
    (n-file-pop)
    )
  )
(defun nfiles-tag-for-rm()
  (interactive)
  (forward-line 0)
  (insert "rm ")
  (forward-line 1)
  )
(defun nfiles-go()
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (let(
         ln
         )
      (while (not (eobp))
        (setq ln (n-get-line))
        (cond
         ((string-match "^rm " ln)
          (n-host-shell-cmd ln)
          (nsimple-delete-line)
          )
         (t
          nil)
         )
        (forward-line 1)
        )
      )
    )
  )
(defun nfiles-ncp_to_l(&optional arg)
  (interactive "P")
  (let(
       (fn	(n-get-line))
       )
    (forward-line 1)
    (n-esc)
    (nsyb-ncp-to-l fn (if arg
                          "go"
                        ""
                        )
                   )
    )
)

