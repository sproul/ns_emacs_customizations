(provide 'nrecord)
(if (not (boundp 'nrecord-mode-map))
    (progn
      (setq nrecord-mode-map	(make-sparse-keymap))
      (setq nrecord-hot		nil
            )
      )
  )

(defun nrecord-mode-meat()
  (setq major-mode 'nrecord-mode
        mode-name "nrecord mode"
        )
  (use-local-map nrecord-mode-map)
  (define-key nrecord-mode-map "\C-c\C-c" 'nrecord-revive)
  (define-key nrecord-mode-map "\M-\C-d" 'nrecord-del)
  (define-key nrecord-mode-map "\M-\C-g" 'nrecord-grab)
  (define-key nrecord-mode-map "\M-t" 'nrecord-hot-toggle)
  )

(defun nrecord-revive()
  (interactive)
  (let(
       (limits	(nrecord-limits))
       letter
       )
    (setq letter (buffer-substring-no-properties (car limits)
                                   (progn
                                     (goto-char (cdr limits))
                                     (forward-line -1)	; avoid time stamp
                                     (point)
                                     )
                                   )
          )
    (nbuf-kill)
    (mail)
    (erase-buffer)
    (insert letter)
    )
  )
(defun nrecord-del()
  (interactive)
  (let(
       (limits	(nrecord-limits))
       )
    (delete-region (car limits) (cdr limits))
    )
  )
(defun nrecord-grab()
  (interactive)
  (let(
       (limits	(nrecord-limits))
       )
    (nsimple-copy-region-as-kill (car limits) (cdr limits))
    )
  )
(defun nrecord-limits()
  (let(
       (end	(nrecord-next))
       (beg	(nrecord-prev))
       )
    (cons beg end)
    )
  )
(defun nrecord-hot-toggle()
  (interactive)
  (if nrecord-hot
      (progn
        (setq nrecord-hot nil)
        (define-key nrecord-mode-map " " 'just-one-space)
        (define-key nrecord-mode-map " " 'self-insert-command)
        (define-key nrecord-mode-map "d" 'self-insert-command)
        (define-key nrecord-mode-map "g" 'self-insert-command)
        (define-key nrecord-mode-map "n" 'self-insert-command)
        (define-key nrecord-mode-map "p" 'self-insert-command)
        (define-key nrecord-mode-map "s" 'self-insert-command)
        (define-key nrecord-mode-map "t" 'self-insert-command)
        (message "o f f")
        )
    (setq nrecord-hot t)
    (define-key nrecord-mode-map " " 'scroll-down)
    (define-key nrecord-mode-map " " 'scroll-up)
    (define-key nrecord-mode-map "d" 'nrecord-del)
    (define-key nrecord-mode-map "g" 'nrecord-grab)
    (define-key nrecord-mode-map "n" 'nrecord-next)
    (define-key nrecord-mode-map "p" 'nrecord-prev)
    (define-key nrecord-mode-map "s" 'nre-search)
    (define-key nrecord-mode-map "t" 'nrecord-hot-toggle)
    (message "hot")
    )
  )
(defun nrecord-prev()
  (interactive)
  (if (n-r "^To:" t)
      (forward-line 0)
    (goto-char (point-min))
    )
  (point)
  )
(defun nrecord-next()
  (interactive)
  (forward-line 1)
  (if (n-s "^To:")
      (forward-line 0)
    (goto-char (point-max))
    )
  (point)
  )

